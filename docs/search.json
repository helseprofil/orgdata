[{"path":"/articles/debugging.html","id":"orgdata-debug","dir":"Articles","previous_headings":"","what":"orgdata.debug","title":"How to debug","text":"used display process flow running functions orgdata. useful know process creates problems troubleshoot. Options shallow deep used decide levels functions shown process flow. Selecting shallow equal TRUE deep show helper functions well. activate:","code":"options(orgdata.debug = TRUE) # OR debug_opt(\"shallow\") # OR debug_opt(\"deep\")"},{"path":"/articles/debugging.html","id":"orgdata-debug-nrow","dir":"Articles","previous_headings":"","what":"orgdata.debug.nrow","title":"How to debug","text":"make testing faster big file, can load rows activating options. instance, load first 50 rows use:","code":"options(orgdata.debug.nrow = 50) # OR debug_opt(\"nrow\", 50)"},{"path":"/articles/debugging.html","id":"orgdata-debug-row","dir":"Articles","previous_headings":"","what":"orgdata.debug.row","title":"How to debug","text":"select specific row(s) processing. useful especially activating orgdata.debug.geo option. select rows 20 50:","code":"options(orgdata.debug.row = 20:50) # OR debug_opt(\"row\", 20:50)"},{"path":"/articles/debugging.html","id":"orgdata-debug-aggregate","dir":"Articles","previous_headings":"","what":"orgdata.debug.aggregate","title":"How to debug","text":"check geographical codes original data aggregated . instance original data consist enumeration area codes can aggregated municipality county. Activating options add columns origin geographical codes codes aggregate municipality, county, city etc output data. difference options aggreagate argument make_file() argument aggregate = FALSE cease aggregating recoding geographical codes original data. use:","code":"options(orgdata.debug.aggregate = TRUE) # OR debug_opt(\"aggregate\")"},{"path":"/articles/debugging.html","id":"geo","dir":"Articles","previous_headings":"","what":"orgdata.debug.geo","title":"How to debug","text":"option used check code use recoding geographical codes original data current geographical codes. new columns called oriGEO added consisting geographical codes original data example. Column GEO code recode oriGEO. value NA column GEO recode done respective code. reason either codes still valid current year recode code available/valid deleted. warning given.","code":"options(orgdata.debug.geo = TRUE) # OR debug_opt(\"geo\")"},{"path":"/articles/debugging.html","id":"reset","dir":"Articles","previous_headings":"","what":"reset","title":"How to debug","text":"activating options orgdata, kept active actively deactivate restart new R session. can deactivate :","code":"reset_opt()"},{"path":"/articles/debugging.html","id":"expl","dir":"Articles","previous_headings":"","what":"Example output","title":"How to debug","text":"example output activating orgdata.debug.geo","code":"oriGEO      GEO  AAR KJONN UTDANN TAB1 TAB2 TAB3 TAB4   ANDRE   ANNEN      1:  1010102 30010102 2019     0     01    2    8    1    1       1       2      2:  1010102 30010102 2019     0     01    2    5    1    1       1       3      3:  1010102 30010102 2019     0     01    1    8    1    1       1       3      4:  1010102 30010102 2019     0     01    3    8    1    1       3       3      5:  1010102 30010102 2019     0     02    3    8    2    2      20      20     ---                                                                         326790: 50610108       NA 2019     2     02    2    5    1    2      20      20 326791: 50610108       NA 2019     2     02    3    5    1    2      20      20 326792: 50610108       NA 2019     2     02    4    8    1    1      20      20 326793: 50610110       NA 2019     0     03    4    8    1    1      20      20 326794: 50610110       NA 2019     1     03    4    8    1    1      20      20"},{"path":"/articles/geo-recode.html","id":"recode-geo-codes","dir":"Articles","previous_headings":"","what":"Recode Geo Codes","title":"Recode and Map Geo","text":"function create table recoding geo geo_recode(). table consist previous codes new codes whenever available. instance, get codes kommuner 2017 2022. table list codes kommuner since 2017 columname oldCode current codes ie. 2022, colum currentCode. geo codes changed since 2017 new codes currentCode column. geo codes changed since 2017 value NA oldCode column. Use argument write = TRUE save database. table already exists database just want add new dataset table, use argument append = TRUE. table database called kommune2022 data consist geo codes 2022, ie. argument = 2022 typ = kommune. However cases need use argument write = TRUE. Check documentation help(\"geo_recode\").","code":"library(orgdata) dt <- geo_recode(type = \"kommune\", from = 2018, to = 2022) dt[1:5]"},{"path":"/articles/geo-recode.html","id":"mapping-geo-codes","dir":"Articles","previous_headings":"","what":"Mapping Geo Codes","title":"Recode and Map Geo","text":"function create geo mapping geo_levels(). default table name created database tblGeo. consists geo granularities (levels) selected year. lowest level enumeration areas codes grunnkrets. Arguments write append can use calling geo_levels() function. However cases, need use append = TRUE, ie. append data existing tblGeo database.","code":"DT <- geo_levels(year = 2022) DT[sample(1:.N, 5)]"},{"path":"/articles/geo-recode.html","id":"merge-geo-codes","dir":"Articles","previous_headings":"","what":"Merge Geo Codes","title":"Recode and Map Geo","text":"geo_recode() geo_levels() fetch data via API available SSB. merge geo codes aren’t available via API can done function geo_merge(). data merge can format accepted read_file() function. data must consist column id merge database tblGeo column new geo codes added . example function can specified. Please read documentation type arguments can accepted.","code":"dd <- geo_merge(id.table = \"kommune\",                 id.file = \"var01\",                 geo.col = \"code_levekaar\",                 geo.level = \"levekaar\",                 file = \"C:/Users/ybka/data/levekaar.csv\",                 year = 2022)"},{"path":"/articles/get-started.html","id":"aggregate-all-files","dir":"Articles","previous_headings":"","what":"Aggregate all files","title":"Get started","text":"aggregate files specific group BEFOLKNING group. satisfy output error shown process, save output .csv file : certain process controlled everything working correctly. save output directly .csv file :","code":"library(orgdata) df <- make_file(\"BEFOLKNING\") df save_file(df, \"BEFOLKNING\") df <- make_file(\"BEFOLKNING\", save = TRUE)"},{"path":"/articles/get-started.html","id":"aggregate-selected-files-only","dir":"Articles","previous_headings":"","what":"Aggregate selected files only","title":"Get started","text":"Aggregating whole files group take long time many files selected group. select specific file files selecting KOBLID instead. example selecting one files respectively.","code":"df <- make_file(\"BEFOLKNING\", koblid = 4) df <- make_file(\"BEFOLKNING\", c(4,10,15))"},{"path":"/articles/get-started.html","id":"process-files-without-aggregating","dir":"Articles","previous_headings":"","what":"Process files without aggregating","title":"Get started","text":"need look file prior aggregated. specify argument aggregate TRUE. also activate globally via options. activating globally using options, proceeding processes aggregated unless ’s changed function call reset options saved default op <- options().","code":"df <- make_file(\"BEFOLKNING\", aggregate = FALSE)  # Global option op <- options()  options(orgdata.aggregate = FALSE) df <- make_file(\"BEFOLKNING\") options(op)"},{"path":"/articles/standard.html","id":"keyword-for-github-commit","dir":"Articles","previous_headings":"","what":"Keyword for GitHub Commit","title":"Make things standard","text":"keywords helpful searching relevant commits: Feat: new feature function Fix: bug fix Doc: documentation changes documentation Close: Style: changes code comments aren’t bugs Test: code testing tests folder DEV: development processes new feature VER: first version upgrade Misc: changes aren’t critical doesn’t fit keywords. Avoid using possible last resort Example commit message","code":"Feat: Get list of new files  New files are missing in the current list. They need to be in the current list before aggregating."},{"path":"/articles/standard.html","id":"github-commit-message","dir":"Articles","previous_headings":"","what":"Github Commit Message","title":"Make things standard","text":"Use message commit follows: first line gives summary done. Preferably write imperative mood like commanding someone especially commit related features, functions (Feat:) fixing code (Fix).","code":"Keyword: Write summary as imperative or command  More detail explanation if necessary with maximum 72 characters and use line break for long sentences."},{"path":"/articles/standard.html","id":"folders-structure","dir":"Articles","previous_headings":"","what":"Folders structure","title":"Make things standard","text":"files located files used. Folder /R R codes functions objects orgdata live. Folder /inst SQL code files files needed package. Folder /dev files aren’t used package good reference code testing. Files prefix utils-* folder /R helper functions used multiple times different places. Put functions helper functions file aren’t used different places.","code":""},{"path":"/articles/standard.html","id":"naming-style-function-or-object","dir":"Articles","previous_headings":"","what":"Naming style (function or object)","title":"Make things standard","text":"Use naming style: snake_case style function eg. find_column_input camelCase style object eg. fileGroup kebab-case style filename eg. utils-internal.R","code":""},{"path":"/articles/standard.html","id":"function-names","dir":"Articles","previous_headings":"","what":"Function names","title":"Make things standard","text":"effort group functions according responsibilities :) Files read_ perfix major functions. Files do_ prefix action functions. Files get_ prefix column specific functions. Files find_ prefix helper functions. Files is_ prefix internal functions utility use orgdata package. Internal functions exported needed, can accessed ::: eg. orgdata:::is_separate().","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yusman Kamaleri. Author, maintainer. KHelse group. Contributor, reviewer.            https://www.fhi./hn/folkehelse","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kamaleri Y (2022). orgdata: Aggregating Original Data. R package version 0.5.8, https://github.com/helseprofil/orgdata.","code":"@Manual{,   title = {orgdata: Aggregating Original Data},   author = {Yusman Kamaleri},   year = {2022},   note = {R package version 0.5.8},   url = {https://github.com/helseprofil/orgdata}, }"},{"path":"/index.html","id":"orgdata-","dir":"","previous_headings":"","what":"Aggregating Original Data","title":"Aggregating Original Data","text":"Cleaning, restructuring aggregating ORiGinal DATA preferred dataset.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Aggregating Original Data","text":"install run code maintain dependencies package version, can install orgdata user branch reproducibilty, ie. keeping package version dependencies used development processes. must however install Git prior using kh_restore() function. Alternatively can install development version via orgdata.","code":"source(\"https://raw.githubusercontent.com/helseprofil/misc/main/utils.R\") kh_install(\"orgdata\") source(\"https://raw.githubusercontent.com/helseprofil/misc/main/utils.R\") kh_restore(\"orgdata\") library(orgdata) update_orgdata(ref = \"dev\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Aggregating Original Data","text":"implement specifications per file group registered database use make_file() function. Parallel processing can used needed. Use function make_filegroups() process multiple file groups .","code":"library(orgdata) # All files under BEFOLKNING group dt <- make_file(\"BEFOLKNING\") dt <- make_file(\"BEFOLKNING\", parallel = TRUE)  # For selected files with KOBLID dt <- make_file(\"BEFOLKNING\", koblid = 48) dt <- make_file(\"BEFOLKNING\", koblid = c(48, 72))"},{"path":"/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Aggregating Original Data","text":"Get started Functions overview Presentation slides Conventions Video guide","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 orgdata authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/debug_opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Debugging options — debug_opt","title":"Debugging options — debug_opt","text":"wrapper debugging options.","code":""},{"path":"/reference/debug_opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Debugging options — debug_opt","text":"","code":"debug_opt(   opt = c(\"shallow\", \"deep\", \"nrow\", \"row\", \"aggregate\", \"geo\"),   val = NULL )"},{"path":"/reference/debug_opt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Debugging options — debug_opt","text":"opt Debug options val Value options","code":""},{"path":"/reference/debug_opt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Debugging options — debug_opt","text":"Options available: \"shallow\"   : Show executed funcitons process flow \"deep\"      : Show deeper including helper functions process flow \"nrow\"      : orgdata.debug.nrow. Default value 20 val argument missing \"row\"       : orgdata.debug.row. Default value 1:50 val argument missing \"aggregate\" : Activating orgdata.debug.aggregate \"geo\"       : Activating orgdata.debug.geo","code":""},{"path":"/reference/debug_opt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Debugging options — debug_opt","text":"","code":"if (FALSE) { debug_opt(\"geo\") debug_opt(\"nrow\", 30) }"},{"path":"/reference/do_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Data — do_aggregate","title":"Aggregate Data — do_aggregate","text":"Aggregate data according specification tbl_Filgruppe AGGREGERE column. input argument source must lower granularity level level input.","code":""},{"path":"/reference/do_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Data — do_aggregate","text":"","code":"do_aggregate(   dt = NULL,   source = c(\"grunnkrets\", \"fylke\", \"kommune\", \"bydel\"),   level = c(\"grunnkrets\", \"fylke\", \"kommune\", \"bydel\", \"land\"),   year = NULL,   aggregate.col = NULL,   geoDT = NULL,   check = NULL,   base = NULL,   control = FALSE,   wide = NULL )"},{"path":"/reference/do_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Data — do_aggregate","text":"dt Input data preferrably data.table format mandatory source geographical granularity codes available source data. used merging geo codebook generated geo_levels() level Geographical granularity aggregating data year year georaphical code use recoding aggregating. specified, current year used aggregate.col columns aggregate standard ie. UTDANN, LANDSSB, LANDBAK INNVKAT geoDT Geo codes aggregate dataset check TRUE output keep variables geographical levels without aggregating . useful check geographical codes missing. Else use options(orgdata.aggregate = FALSE) base Logical value. TRUE use year original data base year recode geographical codes. Default FALSE use available codes geo codebook control Logical value. TRUE file controlled possible errors wide Column(s) reshape wide","code":""},{"path":[]},{"path":"/reference/do_aggregate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate Data — do_aggregate","text":"","code":"if (FALSE) { # To aggregate source data with enumeration area codes ie. grunnkrets, to # manucipaltiy ie. kommune dt <- make_file(\"BEFOLKNING\") DT <- do_aggregate(dt, source = \"grunnkrets\", level = \"kommune\") }"},{"path":"/reference/do_colname.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename Columns — do_colname","title":"Rename Columns — do_colname","text":"Rename standard columns dataset","code":""},{"path":"/reference/do_colname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename Columns — do_colname","text":"","code":"do_colname(dt = NULL, cols = NULL)"},{"path":"/reference/do_colname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename Columns — do_colname","text":"dt Input data preferrably data.table format mandatory cols Old new columns. See output get_colname()","code":""},{"path":"/reference/do_column_standard.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename Standard Columns — do_column_standard","title":"Rename Standard Columns — do_column_standard","text":"Renaming standard columns. see standard columns run orgdata:::is_standard_cols().","code":""},{"path":"/reference/do_column_standard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename Standard Columns — do_column_standard","text":"","code":"do_column_standard(dt = NULL, spec = NULL)"},{"path":"/reference/do_column_standard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename Standard Columns — do_column_standard","text":"dt Input data preferrably data.table format mandatory spec Specification data list. See output get_column_standard","code":""},{"path":"/reference/do_delete_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete Selected Rows — do_delete_row","title":"Delete Selected Rows — do_delete_row","text":"Delete selected rows dataset. rows deleted can specified directly Access registration database using minus symbol -","code":""},{"path":"/reference/do_delete_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete Selected Rows — do_delete_row","text":"","code":"do_delete_row(dt = NULL, spec = NULL, con = NULL)"},{"path":"/reference/do_delete_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete Selected Rows — do_delete_row","text":"dt Input data preferrably data.table format mandatory spec Specifications data data.frame con Connection database","code":""},{"path":[]},{"path":"/reference/do_extra_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute Extra Arguments — do_extra_args","title":"Execute Extra Arguments — do_extra_args","text":"based input EXTRA column Access registration database. arguments valid can expanded whenever needed. See details section valid arguments used. argument names written CamelCase style.","code":""},{"path":"/reference/do_extra_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute Extra Arguments — do_extra_args","text":"","code":"do_extra_args(dt = NULL, args = NULL)"},{"path":"/reference/do_extra_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute Extra Arguments — do_extra_args","text":"dt Dataset args Extra arguments specified details section .","code":""},{"path":"/reference/do_extra_args.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Execute Extra Arguments — do_extra_args","text":"Currently, arguments can used: DeleteNaRow : Delete row consisting NA columns","code":""},{"path":[]},{"path":"/reference/do_extra_args_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute Extra Arguments for Filegroup — do_extra_args_group","title":"Execute Extra Arguments for Filegroup — do_extra_args_group","text":"based input EXTRA column Access registration database filegroup. arguments valid can expanded whenever needed. See details section valid arguments used. argument names written CamelCase style.","code":""},{"path":"/reference/do_extra_args_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute Extra Arguments for Filegroup — do_extra_args_group","text":"","code":"do_extra_args_group(dt = NULL, args = NULL)"},{"path":"/reference/do_extra_args_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute Extra Arguments for Filegroup — do_extra_args_group","text":"dt Dataset args Extra arguments specified details section .","code":""},{"path":"/reference/do_extra_args_group.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Execute Extra Arguments for Filegroup — do_extra_args_group","text":"Currently, arguments can used: DeleteOldBydel : Delete bydel codes 2003, except Oslo","code":""},{"path":[]},{"path":"/reference/do_geo_recode.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode Geographical Codes — do_geo_recode","title":"Recode Geographical Codes — do_geo_recode","text":"Recode geographical codes current year. Codes based norgeo::track_change() function. split geogaphical codes previous year, first code current year code chronological order selected recode.","code":""},{"path":"/reference/do_geo_recode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode Geographical Codes — do_geo_recode","text":"","code":"do_geo_recode(   dt = NULL,   code = NULL,   type = c(\"grunnkrets\", \"fylke\", \"kommune\", \"bydel\"),   year = NULL,   con = NULL,   geo = NULL,   base = NULL,   control = FALSE,   ... )"},{"path":"/reference/do_geo_recode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode Geographical Codes — do_geo_recode","text":"dt Input data preferrably data.table format mandatory code Code dataset old new codes data.table format. type geographical granularity recoding dataset output running get_geo_recode() function. year year geograhical codes recoded . empty current year used. con Connection database geo Logical value. Keep old geographical code TRUE. Default FALSE. base Logical value. TRUE use year original data base year recode geographical codes. Default FALSE use available codes geo codebook control Logical value. TRUE file controlled possible errors ... additional arguments","code":""},{"path":[]},{"path":"/reference/do_geo_recode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode Geographical Codes — do_geo_recode","text":"","code":"if (FALSE) { code <- get_geo_recode(con = geo$dbconn, type = \"grunnkrets\") dt <- make_file(\"BEFOLKNING\", aggregate = FALSE) DT <- do_geo_recode(dt, code) }"},{"path":"/reference/do_implicit_null.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Implicit Null — do_implicit_null","title":"Create Implicit Null — do_implicit_null","text":"Implicit Null happens variable dataset unequal number categories different years due one several categories zero case. variables except AAR GEO must equal number categories. data handled package aggregated rawdata. categories variables might different different year. elucidate non-existence category rather zero number belonging category. function standardize categories across year.","code":""},{"path":"/reference/do_implicit_null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Implicit Null — do_implicit_null","text":"","code":"do_implicit_null(   dt = NULL,   level = c(\"grunnkrets\", \"fylke\", \"kommune\", \"bydel\") )"},{"path":"/reference/do_implicit_null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Implicit Null — do_implicit_null","text":"dt Dataset consisting years level Geographical granularity aggregating data ","code":""},{"path":[]},{"path":"/reference/do_make_file_each.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Each File — do_make_file_each","title":"Process Each File — do_make_file_each","text":"Process file parallelly","code":""},{"path":"/reference/do_make_file_each.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Each File — do_make_file_each","text":"","code":"do_make_file_each(   spec,   fgspec,   aggregate,   datacols,   year,   row,   base,   duck = NULL )"},{"path":"/reference/do_make_file_each.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Each File — do_make_file_each","text":"spec File specification fgspec Filegroup specification aggregate Logical value. Default TRUE. Aggregate data according specification registration database. Global options orgdata.aggregate. datacols Columnames kept year year georaphical code use recoding aggregating. specified, current year used row Select specify row(s). Useful debugging base Logical value. TRUE use year original data base year recode geographical codes. Default FALSE use available codes geo codebook duck R6 object DuckDB","code":""},{"path":"/reference/do_manheader.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename Colname Manually — do_manheader","title":"Rename Colname Manually — do_manheader","text":"Rename columns manually based column index.","code":""},{"path":"/reference/do_manheader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename Colname Manually — do_manheader","text":"","code":"do_manheader(dt = NULL, manspec = NULL)"},{"path":"/reference/do_manheader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename Colname Manually — do_manheader","text":"dt Input data preferrably data.table format mandatory manspec Specification MANHEADER column tbl_Innlesing","code":""},{"path":"/reference/do_mutate.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Column — do_mutate","title":"Create Column — do_mutate","text":"Create new column value specified symbols less < > standard columns. example specified KJONN <2>, new column KJONN created value 2. function applicable columns \"GEO\", \"AAR\", \"KJONN\", \"ALDER\", \"UTDANN\", \"LANDSSB\", \"TABS\" \"VALS\".","code":""},{"path":"/reference/do_mutate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Column — do_mutate","text":"","code":"do_mutate(dt = NULL, spec = NULL)"},{"path":"/reference/do_mutate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Column — do_mutate","text":"dt Input data preferrably data.table format mandatory spec Specifications data data.frame","code":""},{"path":[]},{"path":"/reference/do_recode.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode Variables — do_recode","title":"Recode Variables — do_recode","text":"Recode variables based specification tbl_KodeBok ie. codebook. LESID must combined FILGRUPPE create unique reference able recode variables. Specification group ALLE used neither FILGRUPPE LESID specified.","code":""},{"path":"/reference/do_recode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode Variables — do_recode","text":"","code":"do_recode(dt = NULL, spec = NULL, con = NULL, control = FALSE)"},{"path":"/reference/do_recode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode Variables — do_recode","text":"dt Input data preferrably data.table format mandatory spec Specifications data data.frame con Connection database control Logical value. TRUE file controlled possible errors","code":""},{"path":[]},{"path":"/reference/do_recode_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode Category Representing All Groups — do_recode_aggregate","title":"Recode Category Representing All Groups — do_recode_aggregate","text":"Recode category aggregating data based specification Codebook. example aggregating category type diagnoses NA produced represent type diagnoses. basically recode NA preferred value 0 Total.","code":""},{"path":"/reference/do_recode_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode Category Representing All Groups — do_recode_aggregate","text":"","code":"do_recode_aggregate(   dt = NULL,   spec = NULL,   con = NULL,   aggregate = NULL,   control = FALSE )"},{"path":"/reference/do_recode_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode Category Representing All Groups — do_recode_aggregate","text":"dt Input data preferrably data.table format mandatory spec Specification tbl_Filgruppe con Connection database aggregate Logical value. Default TRUE. Aggregate data according specification registration database. Global options orgdata.aggregate. control Logical value. TRUE file controlled possible errors","code":""},{"path":[]},{"path":"/reference/do_recode_post.html","id":null,"dir":"Reference","previous_headings":"","what":"Post Recode Columns — do_recode_post","title":"Post Recode Columns — do_recode_post","text":"Recode selected columns cleaning processing filegroup based specification FILGRUPPE codebook type PS. example columns filegroup values specific year. column value 0. Instead special symbol .. given, representing column missing value available calculation. specify FRA column registration database recode years 1990 2000 TAB1 value foo selected value KOL column ie. AAR = 1990:2000 & TAB1 = \"foo\". Important use symbol & one conditions recode. use R code syntax directly asis, use raw prefix ie. raw(AAR == 1990:2000 & TAB1 == \"foo\"). Selection %%, %chin%, | etc. can used raw prefix.","code":""},{"path":"/reference/do_recode_post.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Post Recode Columns — do_recode_post","text":"","code":"do_recode_post(dt = NULL, spec = NULL, con = NULL)"},{"path":"/reference/do_recode_post.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Post Recode Columns — do_recode_post","text":"dt Input data preferrably data.table format mandatory spec Specification tbl_Filgruppe con Connection database","code":""},{"path":[]},{"path":"/reference/do_recode_regexp.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode Variables with Regular Expression — do_recode_regexp","title":"Recode Variables with Regular Expression — do_recode_regexp","text":"Recode variables regular expression based specification tbl_KodeBok TYPE RE. specification codebook can specific, common general. Specific LESID FILGRUPPE specified create unique reference able recode variables. Common FILGRUPPE specified LESID left empty general FILGRUPPE specified ALLE LESID left empty.","code":""},{"path":"/reference/do_recode_regexp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode Variables with Regular Expression — do_recode_regexp","text":"","code":"do_recode_regexp(dt = NULL, spec = NULL, con = NULL)"},{"path":"/reference/do_recode_regexp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode Variables with Regular Expression — do_recode_regexp","text":"dt Input data preferrably data.table format mandatory spec Specifications data data.frame con Connection database","code":""},{"path":[]},{"path":"/reference/do_recode_without_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode Geo Code Without Aggregate — do_recode_without_aggregate","title":"Recode Geo Code Without Aggregate — do_recode_without_aggregate","text":"Recode geo code without aggregating data. input argument source must lower granularity level level input.","code":""},{"path":"/reference/do_recode_without_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode Geo Code Without Aggregate — do_recode_without_aggregate","text":"","code":"do_recode_without_aggregate(   dt = NULL,   source = c(\"grunnkrets\", \"fylke\", \"kommune\", \"bydel\"),   year = NULL,   base = NULL,   ... )"},{"path":"/reference/do_recode_without_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode Geo Code Without Aggregate — do_recode_without_aggregate","text":"dt Input data preferrably data.table format mandatory source geographical granularity codes available source data. used merging output geo_levels() year year geograhical codes recoded . empty current year used. base Logical value. TRUE use year original data base year recode geographical codes. Default FALSE use available codes geo codebook ... additional arguments","code":""},{"path":[]},{"path":"/reference/do_recode_without_aggregate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode Geo Code Without Aggregate — do_recode_without_aggregate","text":"","code":"if (FALSE) { # Source data with enumeration area codes ie. grunnkrets dt <- make_file(\"BEFOLKNING\", aggregate = FALSE) }"},{"path":"/reference/do_reshape.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape from Wide to Long — do_reshape","title":"Reshape from Wide to Long — do_reshape","text":"Reshape dataset wide format long format.","code":""},{"path":"/reference/do_reshape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape from Wide to Long — do_reshape","text":"","code":"do_reshape(dt = NULL, respec = NULL)"},{"path":"/reference/do_reshape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape from Wide to Long — do_reshape","text":"dt Dataset reshaped respec Reshape specification id measure variables. output get_reshape_id_val()","code":""},{"path":[]},{"path":"/reference/do_reshape_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Special Need Reshape to Long — do_reshape_long","title":"Special Need Reshape to Long — do_reshape_long","text":"function applicable reshape data reshaped wide via Access specification RESHAPE columns.","code":""},{"path":"/reference/do_reshape_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Special Need Reshape to Long — do_reshape_long","text":"","code":"do_reshape_long(dt = NULL, respec = NULL)"},{"path":"/reference/do_reshape_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Special Need Reshape to Long — do_reshape_long","text":"dt output dataset do_reshape_wide() respec Reshape specification id value variables. output get_reshape_wide_spec()","code":""},{"path":[]},{"path":"/reference/do_reshape_rename_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename Reshaped Column — do_reshape_rename_col","title":"Rename Reshaped Column — do_reshape_rename_col","text":"Reshaping variables dataset wide long produce ID value columns. function rename columns specified RESHAPE_KOL Access registration database.","code":""},{"path":"/reference/do_reshape_rename_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename Reshaped Column — do_reshape_rename_col","text":"","code":"do_reshape_rename_col(dt = NULL, spec = NULL)"},{"path":"/reference/do_reshape_rename_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename Reshaped Column — do_reshape_rename_col","text":"dt Dataset reshaped spec Specification column RESHAPE_KOL tbl_Innlesing","code":""},{"path":[]},{"path":"/reference/do_reshape_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape from Long to Wide — do_reshape_wide","title":"Reshape from Long to Wide — do_reshape_wide","text":"Reshape dataset long format wide format.","code":""},{"path":"/reference/do_reshape_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape from Long to Wide — do_reshape_wide","text":"","code":"do_reshape_wide(dt = NULL, respec = NULL)"},{"path":"/reference/do_reshape_wide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape from Long to Wide — do_reshape_wide","text":"dt Dataset reshaped respec Reshape specification id value variables. output get_reshape_wide_spec()","code":""},{"path":[]},{"path":"/reference/do_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Column — do_split","title":"Split Column — do_split","text":"Split columns specified registration database.","code":""},{"path":"/reference/do_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Column — do_split","text":"","code":"do_split(dt = NULL, split = NULL)"},{"path":"/reference/do_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Column — do_split","text":"dt Input data preferrably data.table format mandatory split Split specification list. equivalent output get_split() function","code":""},{"path":"/reference/do_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Year to Data — do_year","title":"Add Year to Data — do_year","text":"Add column year exist rawdata","code":""},{"path":"/reference/do_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Year to Data — do_year","text":"","code":"do_year(dt = NULL, year = NULL)"},{"path":"/reference/do_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Year to Data — do_year","text":"dt Input data preferrably data.table format mandatory year Output get_year()","code":""},{"path":"/reference/emoji.html","id":null,"dir":"Reference","previous_headings":"","what":"Emoji — emoji","title":"Emoji — emoji","text":"Use emoji fun 😄","code":""},{"path":"/reference/emoji.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Emoji — emoji","text":"","code":"emoji(   x = c(\"mark\", \"thumb\", \"write\", \"smile\", \"sad\", \"santa\", \"search\", \"folder\", \"book\") )"},{"path":"/reference/emoji.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Emoji — emoji","text":"x Emoji choose ie. thumb, smile sad","code":""},{"path":"/reference/emoji.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Emoji — emoji","text":"","code":"emoji(\"smile\")"},{"path":"/reference/find_column_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Columns with Single Input — find_column_input","title":"Columns with Single Input — find_column_input","text":"Get value column one input allowed.","code":""},{"path":"/reference/find_column_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Columns with Single Input — find_column_input","text":"","code":"find_column_input(   spec = NULL,   col = NULL,   type = c(\"character\", \"double\", \"integer\") )"},{"path":"/reference/find_column_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Columns with Single Input — find_column_input","text":"spec Specifications data data.frame col Column name database table type Type object output ie. double, integer character. Default character.","code":""},{"path":[]},{"path":"/reference/find_column_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Columns with Multiple Inputs — find_column_multi","title":"Columns with Multiple Inputs — find_column_multi","text":"Get arguments selected column multiple arguments find_column_multi(). output character type arguments length. can can used find_column_multi_input() function get value input list object. interested specific argument among arguments column, use find_column_multi_input_arg() function. See example.","code":""},{"path":"/reference/find_column_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Columns with Multiple Inputs — find_column_multi","text":"","code":"find_column_multi(spec = NULL, col = NULL, sep = c(\",\", \"|\", \":\", \";\", \"&\"))  find_column_multi_input(input = NULL)  find_column_multi_input_arg(input = NULL, arg = NULL)"},{"path":"/reference/find_column_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Columns with Multiple Inputs — find_column_multi","text":"spec Specifications data data.frame col Column name database table sep Symbols separate arguments eg. \",\" \":\" input Input argument(s) character vector arg Name specific argument column","code":""},{"path":"/reference/find_column_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Columns with Multiple Inputs — find_column_multi","text":"Output: find_column_multi gives character vector arguments separated sep argument find_column_multi_input gives list argument names values find_column_multi_input_arg gives single object value selected argument","code":""},{"path":[]},{"path":"/reference/find_column_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Columns with Multiple Inputs — find_column_multi","text":"","code":"if (FALSE) { args <- find_column_multi(spec, \"INNLESARG\") vals <- find_column_multi_input(args) val <- find_column_multi_input_arg(args, \"header\") }"},{"path":"/reference/find_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Rawdata — find_data","title":"Find Rawdata — find_data","text":"Find rawdata load memory process. requires class attribute file set prior using find_data() method. Otherwise, use read_file() function instead unless specific reason .","code":""},{"path":"/reference/find_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Rawdata — find_data","text":"","code":"find_data(file = NULL, ...)"},{"path":"/reference/find_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Rawdata — find_data","text":"file Input file ... options relevant file type","code":""},{"path":"/reference/find_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Rawdata — find_data","text":"","code":"if (FALSE) { file <- \"path/to/my-data.csv\" class(file) <- \"csv\" dt <- find_data(file) }"},{"path":"/reference/find_implicit_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Implicit Null Categories — find_implicit_col","title":"Find Implicit Null Categories — find_implicit_col","text":"Find implicit null categories selected columns every selected year","code":""},{"path":"/reference/find_implicit_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Implicit Null Categories — find_implicit_col","text":"","code":"find_implicit_col(dt, years, col, ref)"},{"path":"/reference/find_implicit_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Implicit Null Categories — find_implicit_col","text":"dt Dataset consisting years years years dataset col Selected column controlled implicit null ref Reference values selected column","code":""},{"path":[]},{"path":"/reference/find_implicit_null.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset for Implicit Null — find_implicit_null","title":"Dataset for Implicit Null — find_implicit_null","text":"Create dataset implicit null every selected columns","code":""},{"path":"/reference/find_implicit_null.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset for Implicit Null — find_implicit_null","text":"","code":"find_implicit_null(imp, year, colstr, level)"},{"path":"/reference/find_implicit_null.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dataset for Implicit Null — find_implicit_null","text":"imp list implicit null data derived get_implicit_col function year Selected year dataset colstr Column structure Class type level Geographical granularity aggregating data ","code":""},{"path":[]},{"path":"/reference/find_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"File Specifications in Registration Database — find_spec","title":"File Specifications in Registration Database — find_spec","text":"function find specifications Access registration database via SQL code. example orginal data data restructured aggregated.. etc.. etc.. specifications registered following tables: tbl_Filgruppe  - File group specification output tbl_Orgfile  - original files tbl_Innlesing  - file read R tbl_Koble  - Connection original files file groups read tbl_KodeBok  - Code book recode value tbl_Compute  - Code book create new category existing categories SQL file must written base::sprintf style ie. '%s','%d' etc. Please refer base::sprintf documentation. addition, SQL code must contain comments. Example SQL code '%s': SELECT * tbl_Koble FILGRUPPE = '%s' saved C:/myfile.sql run code example.","code":""},{"path":"/reference/find_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File Specifications in Registration Database — find_spec","text":"","code":"find_spec(   file = NULL,   value = NULL,   con = NULL,   external = FALSE,   char = NULL,   char2 = NULL,   opposite = FALSE )"},{"path":"/reference/find_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File Specifications in Registration Database — find_spec","text":"file SQL file. external TRUE complete filepath must specified. value value selection SQL code base::sprintf style. example name filgruppe. con Connection database external SQL file outside package. Default FALSE. char First input value added query char2 Second input value added query opposite TRUE second input value read first input value","code":""},{"path":"/reference/find_spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"File Specifications in Registration Database — find_spec","text":"put data.frame.","code":""},{"path":"/reference/find_spec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"File Specifications in Registration Database — find_spec","text":"","code":"if (FALSE) { qr <- find_spec(\"C:/myfile.sql\", value = \"BEFOLKNING\", con = dbconn, external = TRUE) qr2 <- find_spec(\"your.sql\", con = dbconn, char = \"BEFOLKNING\", char2 = 14) }"},{"path":"/reference/geo_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Granularity of Georgraphical Codes — geo_levels","title":"Granularity of Georgraphical Codes — geo_levels","text":"Create database granularity geographical codes aggregate data accordingly. Implementation function base norgeo::cast_geo() function norgeo package.","code":""},{"path":"/reference/geo_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Granularity of Georgraphical Codes — geo_levels","text":"","code":"geo_levels(year = NULL, write = FALSE, append = FALSE, table = \"tblGeo\")"},{"path":"/reference/geo_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Granularity of Georgraphical Codes — geo_levels","text":"year Year valid geographical codes write Write table orgdata.geo database. overwrite table already exists append Append data existing table orgdata.geo table Table name created database. Default tblGeo","code":""},{"path":[]},{"path":"/reference/geo_levels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Granularity of Georgraphical Codes — geo_levels","text":"","code":"if (FALSE) { geo_levels(2020, write = TRUE) geo_levels(2021, append = TRUE) }"},{"path":"/reference/geo_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Other Geo Level Manually — geo_merge","title":"Merge Other Geo Level Manually — geo_merge","text":"Geo codes downloaded SSB API can merged main geo table ie. tblGeo geocodes database. file must consist column merge ie. id.file geo codes add ie. column.","code":""},{"path":"/reference/geo_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Other Geo Level Manually — geo_merge","text":"","code":"geo_merge(   id.table = NULL,   id.file = NULL,   geo.col = NULL,   geo.level = NULL,   file = NULL,   year = NULL,   write = FALSE,   table.name = \"tblGeo\",   ... )"},{"path":"/reference/geo_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Other Geo Level Manually — geo_merge","text":"id.table ID columname merge found database eg. kommune id.file ID columname file merge . depends columnames files. id.table kommune, id.file must columname representing geo codes equivalent kommune codes. id.table id.file used merging codes must unique. geo.col Columname new geo codes eg. new geo codes levekaar, geo.col columname codes levekaar can found. geo.level Geographical level merged file representing eg. \"levekaar\". value column level tblGeo database. file Complete path filename merge year Year code valid . sepecified orgdata.year used. write Write table orgdata.geo database. overwrite table already exists table.name Name table geo recode geocodes database. can found getOptions(\"orgdata.geo\"). default tblGeo. ... possible arguments","code":""},{"path":"/reference/geo_merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge Other Geo Level Manually — geo_merge","text":"","code":"if (FALSE) { dt <- geo_merge(id.table = \"grunnkrets\",                 id.file = \"id\",                 geo.col = \"col2\",                 file = \"C:/path/to/file.csv\",                 geo.level = \"levekaar\",                 year = 2022) }"},{"path":"/reference/geo_recode.html","id":null,"dir":"Reference","previous_headings":"","what":"Geographical Codes — geo_recode","title":"Geographical Codes — geo_recode","text":"Create table current year geographical codes previous years geogprahical codes. used recode previous years codes current codes. Implementation function base norgeo::track_change() function.","code":""},{"path":"/reference/geo_recode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geographical Codes — geo_recode","text":"","code":"geo_recode(   type = c(\"grunnkrets\", \"bydel\", \"kommune\", \"fylke\"),   from = NULL,   to = NULL,   write = FALSE,   append = FALSE )"},{"path":"/reference/geo_recode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geographical Codes — geo_recode","text":"type Type regional granularity ie. enumeration area (grunnkrets) Starting year range period. Current year default left empty End year range period. Current year default left empty write Write table orgdata.geo database. overwrite table already exists append Append data existing table orgdata.geo","code":""},{"path":[]},{"path":"/reference/geo_recode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geographical Codes — geo_recode","text":"","code":"if (FALSE) { geo_recode(type = \"grunnkrets\", from = 2018, to = 2021, write = TRUE) geo_recode(type = \"grunnkrets\", from = 2018, to = 2021, append = TRUE) }"},{"path":"/reference/get_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Aggregate Specification — get_aggregate","title":"Get Aggregate Specification — get_aggregate","text":"Get specification data aggregated different geographical levels ie. county, manucipality, town etc.","code":""},{"path":"/reference/get_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Aggregate Specification — get_aggregate","text":"","code":"get_aggregate(group = NULL, con = NULL, spec = NULL)"},{"path":"/reference/get_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Aggregate Specification — get_aggregate","text":"group group files (filgruppe) con Connection database spec Specification tbl_Filgruppe","code":""},{"path":[]},{"path":"/reference/get_codebok.html","id":null,"dir":"Reference","previous_headings":"","what":"Codebook — get_codebok","title":"Codebook — get_codebok","text":"Get codebook recoding variables based FILGRUPPE LESID number. Specification group ALLE used neither FILGRUPPE LESID specified.","code":""},{"path":"/reference/get_codebok.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Codebook — get_codebok","text":"","code":"get_codebok(spec = NULL, con = NULL)"},{"path":"/reference/get_codebok.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Codebook — get_codebok","text":"spec Specifications data data.frame con Connection database","code":""},{"path":[]},{"path":"/reference/get_codebok_aggregate.html","id":null,"dir":"Reference","previous_headings":"","what":"Codebook for Aggregate Columns — get_codebok_aggregate","title":"Codebook for Aggregate Columns — get_codebok_aggregate","text":"Get codebook recoding aggregated variables based FILGRUPPE. Specification group ALLE used FILGRUPPE specified.","code":""},{"path":"/reference/get_codebok_aggregate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Codebook for Aggregate Columns — get_codebok_aggregate","text":"","code":"get_codebok_aggregate(spec = NULL, con = NULL)"},{"path":"/reference/get_codebok_aggregate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Codebook for Aggregate Columns — get_codebok_aggregate","text":"spec Specifications data data.frame con Connection database","code":""},{"path":[]},{"path":"/reference/get_codebok_regexp.html","id":null,"dir":"Reference","previous_headings":"","what":"Codebook with Regular Expression — get_codebok_regexp","title":"Codebook with Regular Expression — get_codebok_regexp","text":"Get codebook regular expression recode variables based FILGRUPPE LESID number. Specification group ALLE used neither FILGRUPPE LESID specified.","code":""},{"path":"/reference/get_codebok_regexp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Codebook with Regular Expression — get_codebok_regexp","text":"","code":"get_codebok_regexp(spec = NULL, con = NULL)"},{"path":"/reference/get_codebok_regexp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Codebook with Regular Expression — get_codebok_regexp","text":"spec Specifications data data.frame con Connection database","code":""},{"path":[]},{"path":"/reference/get_colname.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Renamed Columns — get_colname","title":"Get Renamed Columns — get_colname","text":"Get old new coloumnames renamed dataset.","code":""},{"path":"/reference/get_colname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Renamed Columns — get_colname","text":"","code":"get_colname(group = NULL, con = NULL, spec = NULL)"},{"path":"/reference/get_colname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Renamed Columns — get_colname","text":"group group files (filgruppe) con Connection database spec Specification tbl_Filgruppe","code":""},{"path":"/reference/get_colname.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Renamed Columns — get_colname","text":"list consist two variables ie. old newindicating old new columnames","code":""},{"path":"/reference/get_column_standard.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Standard Columns — get_column_standard","title":"Get Standard Columns — get_column_standard","text":"Standard columns names rawdata checked standard names options getOption(\"orgdata.columns\"). Nevertheless column GEO special case geo codes derived combination two columns.","code":""},{"path":"/reference/get_column_standard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Standard Columns — get_column_standard","text":"","code":"get_column_standard(group = NULL, con = NULL, spec = NULL)"},{"path":"/reference/get_column_standard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Standard Columns — get_column_standard","text":"group group files (filgruppe) con Connection database spec Specification standard columns tbl_Innlesing","code":""},{"path":"/reference/get_column_standard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Standard Columns — get_column_standard","text":"list old new columnnames","code":""},{"path":"/reference/get_delete_row_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Rows for Deletion — get_delete_row_spec","title":"Get Rows for Deletion — get_delete_row_spec","text":"Get rows deleted specified minus - symbol codebook based FILGRUPPE LESID number. Specification group ALLE used neither FILGRUPPE LESID specified.","code":""},{"path":"/reference/get_delete_row_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Rows for Deletion — get_delete_row_spec","text":"","code":"get_delete_row_spec(spec = NULL, con = NULL)"},{"path":"/reference/get_delete_row_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Rows for Deletion — get_delete_row_spec","text":"spec Specifications data data.frame con Connection database","code":""},{"path":[]},{"path":"/reference/get_extra_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Extra Arguments — get_extra_args","title":"Get Extra Arguments — get_extra_args","text":"based input EXTRA column Access registration database. arguments valid can expanded whenever needed. argument names written CamelCase style. Use comma seperate multiple arguments.","code":""},{"path":"/reference/get_extra_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Extra Arguments — get_extra_args","text":"","code":"get_extra_args(group = NULL, con = NULL, spec = NULL)"},{"path":"/reference/get_extra_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Extra Arguments — get_extra_args","text":"group group files (filgruppe) con Connection database spec Specifications data data.frame","code":""},{"path":"/reference/get_extra_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Extra Arguments — get_extra_args","text":"list names value arguments","code":""},{"path":[]},{"path":"/reference/get_extra_args_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Extra Arguments for Filegroup — get_extra_args_group","title":"Get Extra Arguments for Filegroup — get_extra_args_group","text":"based input EXTRA column Access registration database filegroup. arguments valid can expanded whenever needed. argument names written CamelCase style. Use comma seperate multiple arguments.","code":""},{"path":"/reference/get_extra_args_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Extra Arguments for Filegroup — get_extra_args_group","text":"","code":"get_extra_args_group(group = NULL, con = NULL, spec = NULL)"},{"path":"/reference/get_extra_args_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Extra Arguments for Filegroup — get_extra_args_group","text":"group group files (filgruppe) con Connection database spec Specifications data data.frame","code":""},{"path":"/reference/get_extra_args_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Extra Arguments for Filegroup — get_extra_args_group","text":"list names value arguments","code":""},{"path":[]},{"path":"/reference/get_geo_recode.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Previous and Current Geo Codes — get_geo_recode","title":"Get Previous and Current Geo Codes — get_geo_recode","text":"Get geographical codes registered geo-database consist old new codes applicable respective year.","code":""},{"path":"/reference/get_geo_recode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Previous and Current Geo Codes — get_geo_recode","text":"","code":"get_geo_recode(   con = NULL,   type = c(\"grunnkrets\", \"fylke\", \"kommune\", \"bydel\"),   year = NULL )"},{"path":"/reference/get_geo_recode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Previous and Current Geo Codes — get_geo_recode","text":"con Connection database type geographical granularity recoding dataset output running get_geo_recode() function. year year geograhical codes recoded . empty current year used.","code":""},{"path":"/reference/get_geo_recode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Previous and Current Geo Codes — get_geo_recode","text":"dataset columns GEO representing GEO codes recoded new code ie. .","code":""},{"path":[]},{"path":"/reference/get_grunnkrets_dummy.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Dummy Enumeration Area Codes — get_grunnkrets_dummy","title":"Create Dummy Enumeration Area Codes — get_grunnkrets_dummy","text":"downloaded enumeration area codes SSB lack codes missing ie. xxxx9999. function create codes needed recoding older codes current enumeration area codes.","code":""},{"path":"/reference/get_grunnkrets_dummy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Dummy Enumeration Area Codes — get_grunnkrets_dummy","text":"","code":"get_grunnkrets_dummy(dt, from, to)"},{"path":"/reference/get_grunnkrets_dummy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Dummy Enumeration Area Codes — get_grunnkrets_dummy","text":"dt Downloaded data norgeo::track_change() Starting year range period. Current year default left empty End year range period. Current year default left empty","code":""},{"path":[]},{"path":"/reference/get_implicit_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Implicit Null Categories — get_implicit_col","title":"Get Implicit Null Categories — get_implicit_col","text":"Get categories implicit values selected columns","code":""},{"path":"/reference/get_implicit_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Implicit Null Categories — get_implicit_col","text":"","code":"get_implicit_col(dt, years, cols, refs)"},{"path":"/reference/get_implicit_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Implicit Null Categories — get_implicit_col","text":"dt Dataset consisting years years years dataset cols Columns controlled implicit null refs Reference values selected columns","code":""},{"path":[]},{"path":"/reference/get_implicit_per_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset for Implicit Null by Year — get_implicit_per_year","title":"Dataset for Implicit Null by Year — get_implicit_per_year","text":"Create dataset implicit null available year dataset","code":""},{"path":"/reference/get_implicit_per_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset for Implicit Null by Year — get_implicit_per_year","text":"","code":"get_implicit_per_year(imp, refs, years, colstr, .env = parent.frame())"},{"path":"/reference/get_implicit_per_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dataset for Implicit Null by Year — get_implicit_per_year","text":"imp list implicit null data derived get_implicit_col function refs Reference values selected columns years years dataset colstr Column structure Class type .env Inherit object parent frame","code":""},{"path":[]},{"path":"/reference/get_implicit_ref.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Reference Values — get_implicit_ref","title":"Get Reference Values — get_implicit_ref","text":"Get valid values columns controlled possible implicit null.","code":""},{"path":"/reference/get_implicit_ref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Reference Values — get_implicit_ref","text":"","code":"get_implicit_ref(dt, cols)"},{"path":"/reference/get_implicit_ref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Reference Values — get_implicit_ref","text":"dt Dataset consisting years cols Columns controlled implicit null","code":""},{"path":[]},{"path":"/reference/get_innlesarg.html","id":null,"dir":"Reference","previous_headings":"","what":"Get INNLESARG Specifications — get_innlesarg","title":"Get INNLESARG Specifications — get_innlesarg","text":"function access possible arguments columns INNLESARG table tbl_Innlesing'. Symbol \"|\" MUST used separate arguments one arguments. symbol right top TAB button keyboard. Arguments can used depends file type. Please refer read_file(). example: header=TRUE | sheet=Ark1 | sep=,","code":""},{"path":"/reference/get_innlesarg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get INNLESARG Specifications — get_innlesarg","text":"","code":"get_innlesarg(group = NULL, con = NULL, spec = NULL)"},{"path":"/reference/get_innlesarg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get INNLESARG Specifications — get_innlesarg","text":"group group files (filgruppe) con Connection database spec Specifications data data.frame","code":""},{"path":"/reference/get_innlesarg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get INNLESARG Specifications — get_innlesarg","text":"list names value arguments","code":""},{"path":"/reference/get_manheader.html","id":null,"dir":"Reference","previous_headings":"","what":"Get MANHEADER — get_manheader","title":"Get MANHEADER — get_manheader","text":"Get inputs column MANHEADER tbl_Innlesing. input tells want manually rename column various reasons column name rawdata long uses unstandard naming style. input like : 3,6=AGE,EDUCATION means want rename column 3 AGE column 6 EDUCATION.","code":""},{"path":"/reference/get_manheader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get MANHEADER — get_manheader","text":"","code":"get_manheader(group = NULL, con = NULL, spec = NULL)"},{"path":"/reference/get_manheader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get MANHEADER — get_manheader","text":"group group files (filgruppe) con Connection database spec Specifications data data.frame","code":""},{"path":"/reference/get_manheader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get MANHEADER — get_manheader","text":"list containing $index refer column index $col new name selected column index.","code":""},{"path":"/reference/get_mutate_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Value for New Column — get_mutate_value","title":"Value for New Column — get_mutate_value","text":"Get value new column column fullfilled condition new column.","code":""},{"path":"/reference/get_mutate_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value for New Column — get_mutate_value","text":"","code":"get_mutate_value(col)"},{"path":"/reference/get_mutate_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value for New Column — get_mutate_value","text":"col selected column","code":""},{"path":[]},{"path":"/reference/get_reshape_id_val.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape Id and Measure — get_reshape_id_val","title":"Reshape Id and Measure — get_reshape_id_val","text":"Get id measure variables reshaping dataset. detail please read data.table::melt.data.table understand id mearsure variables.","code":""},{"path":"/reference/get_reshape_id_val.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape Id and Measure — get_reshape_id_val","text":"","code":"get_reshape_id_val(dt = NULL, group = NULL, con = NULL, spec = NULL)"},{"path":"/reference/get_reshape_id_val.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape Id and Measure — get_reshape_id_val","text":"dt Dataset reshaped group group files (filgruppe) con Connection database spec Specification tbl_Filgruppe","code":""},{"path":[]},{"path":"/reference/get_reshape_wide_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape Wide Specification — get_reshape_wide_spec","title":"Reshape Wide Specification — get_reshape_wide_spec","text":"Get formula value variables reshaping long dataset wide. detail please read data.table::dcast.data.table understand formula value variables.","code":""},{"path":"/reference/get_reshape_wide_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape Wide Specification — get_reshape_wide_spec","text":"","code":"get_reshape_wide_spec(dt = NULL, group = NULL, con = NULL, spec = NULL)"},{"path":"/reference/get_reshape_wide_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape Wide Specification — get_reshape_wide_spec","text":"dt Dataset reshaped group group files (filgruppe) con Connection database spec Specification tbl_Filgruppe","code":""},{"path":[]},{"path":"/reference/get_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Split Column — get_split","title":"Get Split Column — get_split","text":"Get column splitted column name new splitted columns. already specification find_spec(), arguments group con must NULL.","code":""},{"path":"/reference/get_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Split Column — get_split","text":"","code":"get_split(group = NULL, con = NULL, spec = NULL)"},{"path":"/reference/get_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Split Column — get_split","text":"group group files (filgruppe) con Connection database spec Specification tbl_Filgruppe","code":""},{"path":"/reference/get_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Split Column — get_split","text":"list consist two variables ie. toindicating column split new column names ","code":""},{"path":"/reference/get_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Year of Data — get_year","title":"Get Year of Data — get_year","text":"Get year rawdata either available rawdata manually specified registration database. Check helper function is_defaar(). get_aar() alias get_year()","code":""},{"path":"/reference/get_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Year of Data — get_year","text":"","code":"get_year(spec = NULL, con = NULL)  get_aar(spec = NULL, con = NULL)"},{"path":"/reference/get_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Year of Data — get_year","text":"spec Specifications data data.frame con Connection database","code":""},{"path":"/reference/get_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Year of Data — get_year","text":"Either character integer value. Character value refering column name raw data value year. Integer value refers year shoule added raw data column name AAR","code":""},{"path":"/reference/is_col_num_warn.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert column to numeric with warning — is_col_num_warn","title":"Convert column to numeric with warning — is_col_num_warn","text":"Covert numeric columns expected numeric give warning log coercion","code":""},{"path":"/reference/is_col_num_warn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert column to numeric with warning — is_col_num_warn","text":"","code":"is_col_num_warn(dt, cols, koblid = NULL)"},{"path":"/reference/is_col_num_warn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert column to numeric with warning — is_col_num_warn","text":"dt Dataset cols Columns converted numeric koblid ID connect file spec ... Extra arguments","code":""},{"path":"/reference/is_col_separate.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple inputs style — is_col_separate","title":"Multiple inputs style — is_col_separate","text":"Multiple inputs separated , KOLNAVN MANHEADER","code":""},{"path":"/reference/is_col_separate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple inputs style — is_col_separate","text":"","code":"is_col_separate(input)"},{"path":"/reference/is_col_separate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple inputs style — is_col_separate","text":"input product find_column_input()","code":""},{"path":"/reference/is_conn_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to Database — is_conn_db","title":"Connect to Database — is_conn_db","text":"Use R6 object connect database","code":""},{"path":"/reference/is_conn_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to Database — is_conn_db","text":"","code":"is_conn_db(dbname = NULL, db = c(\"kh\", \"geo\", \"raw\"), .test = FALSE, ...)"},{"path":"/reference/is_conn_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to Database — is_conn_db","text":"dbname Database filename complete path db Database file kh (Kommunehelse), geo (Geo code) raw (Raw database) .test Use testing ... arguments","code":""},{"path":"/reference/is_defaar.html","id":null,"dir":"Reference","previous_headings":"","what":"Year for The Data — is_defaar","title":"Year for The Data — is_defaar","text":"Find year value column DEFAAR table tbl_Orgfile column year available raw data. indicated $Y column AAR table tbl_Innlesing.","code":""},{"path":"/reference/is_defaar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Year for The Data — is_defaar","text":"","code":"is_defaar(id = NULL, con = NULL)"},{"path":"/reference/is_defaar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Year for The Data — is_defaar","text":"con Connection database","code":""},{"path":"/reference/is_defaar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Year for The Data — is_defaar","text":"integer","code":""},{"path":"/reference/is_input_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Type of object input — is_input_type","title":"Type of object input — is_input_type","text":"Convert value selected type ie. checked typeof","code":""},{"path":"/reference/is_input_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Type of object input — is_input_type","text":"","code":"is_input_type(value, type = c(\"character\", \"double\", \"integer\"))"},{"path":"/reference/is_input_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Type of object input — is_input_type","text":"value Input value converted","code":""},{"path":"/reference/is_process_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Raw Data File — is_process_file","title":"Process Raw Data File — is_process_file","text":"Implement specifications raw data cleaning recoding data.","code":""},{"path":"/reference/is_process_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Raw Data File — is_process_file","text":"","code":"is_process_file(   file,   filespec,   fgspec,   con,   verbose = NULL,   row = NULL,   control = FALSE,   duck = NULL )"},{"path":"/reference/is_process_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Raw Data File — is_process_file","text":"file File rawdata filespec Specification file tbl_Innlesing fgspec Specification file group con Connection database verbose Make processes explicit. Default FALSE row Select specific row control Logical value. file checked possible errors duck R6 object DuckDB","code":""},{"path":"/reference/is_process_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Raw Data File — is_process_file","text":"dataset data.table format","code":""},{"path":"/reference/is_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Create the SQL query — is_query","title":"Create the SQL query — is_query","text":"Create SQL query get data specified","code":""},{"path":"/reference/is_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create the SQL query — is_query","text":"","code":"is_query(   file = NULL,   value = NULL,   external = FALSE,   char = NULL,   char2 = NULL,   opposite = FALSE )"},{"path":"/reference/KHelse.html","id":null,"dir":"Reference","previous_headings":"","what":"Connecting to Database — KHelse","title":"Connecting to Database — KHelse","text":"Connect registration database get necessary information data source cleaning specification. driver applicable Access Database. Calling method KHelse$new(YourFilePath) create object R6 Class. Please refer examples.","code":""},{"path":"/reference/KHelse.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Connecting to Database — KHelse","text":"dbname Database filename. dbtype Database type either Access DuckDB dbyear Production year. relevant DuckDB dbconn Database connection. tblname Table name created database. tblvalue Data inserted table tblname. Data must data.frame data.table format.","code":""},{"path":[]},{"path":"/reference/KHelse.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Connecting to Database — KHelse","text":"KHelse$new() KHelse$db_connect() KHelse$db_write() KHelse$db_read() KHelse$db_remove_table() KHelse$db_close()","code":""},{"path":"/reference/KHelse.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Connecting to Database — KHelse","text":"Start connecting database.","code":""},{"path":"/reference/KHelse.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connecting to Database — KHelse","text":"","code":"KHelse$new(dbname = NULL, dbtype = \"Access\", dbyear = NULL)"},{"path":"/reference/KHelse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connecting to Database — KHelse","text":"dbname Database filename. dbtype Database type eg. Access, SQLite, DuckDB etc. dbyear Production year. arg relevant raw database DuckDB","code":""},{"path":"/reference/KHelse.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connecting to Database — KHelse","text":"","code":"\\dontrun{ kh <- KHelse$new(file.path(getOption(\"orgdata.drive\"),                            getOption(\"orgdata.folder.db\"),                            getOption(\"orgdata.db\"))) kh$dbname kh$db_close() kh$db_connect() }"},{"path":"/reference/KHelse.html","id":"method-db-connect-","dir":"Reference","previous_headings":"","what":"Method db_connect()","title":"Connecting to Database — KHelse","text":"Reconnect database db_close used.","code":""},{"path":"/reference/KHelse.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Connecting to Database — KHelse","text":"","code":"KHelse$db_connect()"},{"path":"/reference/KHelse.html","id":"method-db-write-","dir":"Reference","previous_headings":"","what":"Method db_write()","title":"Connecting to Database — KHelse","text":"Write table database.","code":""},{"path":"/reference/KHelse.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Connecting to Database — KHelse","text":"","code":"KHelse$db_write(   name = NULL,   value = NULL,   write = FALSE,   append = FALSE,   field.types = NULL )"},{"path":"/reference/KHelse.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connecting to Database — KHelse","text":"name Table name created database. value data inserted table. write Write table database. overwrite table already exists append Append data existing table database field.types Type data specified column. Must named vector","code":""},{"path":"/reference/KHelse.html","id":"method-db-read-","dir":"Reference","previous_headings":"","what":"Method db_read()","title":"Connecting to Database — KHelse","text":"Read table convert data.table format","code":""},{"path":"/reference/KHelse.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Connecting to Database — KHelse","text":"","code":"KHelse$db_read(name = NULL)"},{"path":"/reference/KHelse.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connecting to Database — KHelse","text":"name Table name created database.","code":""},{"path":"/reference/KHelse.html","id":"method-db-remove-table-","dir":"Reference","previous_headings":"","what":"Method db_remove_table()","title":"Connecting to Database — KHelse","text":"Remove table database.","code":""},{"path":"/reference/KHelse.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Connecting to Database — KHelse","text":"","code":"KHelse$db_remove_table(name = NULL)"},{"path":"/reference/KHelse.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connecting to Database — KHelse","text":"name Table name created database.","code":""},{"path":"/reference/KHelse.html","id":"method-db-close-","dir":"Reference","previous_headings":"","what":"Method db_close()","title":"Connecting to Database — KHelse","text":"Close connection database.","code":""},{"path":"/reference/KHelse.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Connecting to Database — KHelse","text":"","code":"KHelse$db_close()"},{"path":"/reference/KHelse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connecting to Database — KHelse","text":"","code":"## ------------------------------------------------ ## Method `KHelse$new` ## ------------------------------------------------  if (FALSE) { kh <- KHelse$new(file.path(getOption(\"orgdata.drive\"),                            getOption(\"orgdata.folder.db\"),                            getOption(\"orgdata.db\"))) kh$dbname kh$db_close() kh$db_connect() }"},{"path":"/reference/log.html","id":null,"dir":"Reference","previous_headings":"","what":"Environment to store log info — log","title":"Environment to store log info — log","text":"Environment store log info","code":""},{"path":"/reference/log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Environment to store log info — log","text":"","code":"log"},{"path":"/reference/log.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Environment to store log info — log","text":"object class environment length 0.","code":""},{"path":"/reference/make_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Implement the Specifications — make_file","title":"Implement the Specifications — make_file","text":"Make csv file specifications register database implement raw data selected group files (filgruppe). files selected group affected unless KOBLID argument koblid specified. Specifying koblid useful especially testing purposes. function lag_fil() alias make_file().","code":""},{"path":"/reference/make_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Implement the Specifications — make_file","text":"","code":"make_file(   group = NULL,   koblid = NULL,   aggregate = NULL,   save = FALSE,   year = NULL,   implicitnull = NULL,   row = NULL,   base = NULL,   parallel = NULL )  lag_fil(   group = NULL,   koblid = NULL,   aggregate = NULL,   save = FALSE,   year = NULL,   implicitnull = NULL,   row = NULL,   base = NULL,   parallel = NULL )"},{"path":"/reference/make_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Implement the Specifications — make_file","text":"group group files (filgruppe) koblid KOBLID table tbl_Koble aggregate Logical value. Default TRUE. Aggregate data according specification registration database. Global options orgdata.aggregate. save Save .csv activating save_file(). Default FALSE year year georaphical code use recoding aggregating. specified, current year used implicitnull Logical value. Default TRUE add implicit null dataset. Global options orgdata.implicit.null. row Select specify row(s). Useful debugging base Logical value. TRUE use year original data base year recode geographical codes. Default FALSE use available codes geo codebook parallel Logical numeric value. logical value TRUE run parallel using 50% ie. 0.5 local cores. User can decide percentage needed. example use 75% cores specify parallel = 0.75. Nevertheless, maximum cores allowed 80%. Default value FALSE ie. use sequential processing","code":""},{"path":[]},{"path":"/reference/make_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Implement the Specifications — make_file","text":"","code":"if (FALSE) { dt <- make_file(\"ENPERSON\") dt <- make_file(\"ENPERSON\", koblid = 120:125, parallel = TRUE) #with parallel processing }"},{"path":"/reference/make_filegroups.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Multiple Filegroups — make_filegroups","title":"Make Multiple Filegroups — make_filegroups","text":"Implement specification registration database several filegroups . function used selected filegroups controlled errors. selected filegroups saved .csv file respective filegroup names folder registration database.","code":""},{"path":"/reference/make_filegroups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Multiple Filegroups — make_filegroups","text":"","code":"make_filegroups(...)  lag_filgrupper(...)"},{"path":"/reference/make_filegroups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Multiple Filegroups — make_filegroups","text":"... Filegroup(s)","code":""},{"path":[]},{"path":"/reference/make_filegroups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Multiple Filegroups — make_filegroups","text":"","code":"if (FALSE) { make_filegroups(NEET, TRANGBODD, DODE)  fgp <- c(\"NEET\", \"TRANGBODD\",\"DODE\") make_filegroups(fgp) }"},{"path":"/reference/orgdata-package.html","id":null,"dir":"Reference","previous_headings":"","what":"orgdata: Aggregating Original Data — orgdata-package","title":"orgdata: Aggregating Original Data — orgdata-package","text":"Cleaning, restructuring aggregating original data usually enumerical area codes geographical codes.","code":""},{"path":"/reference/orgdata-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"orgdata: Aggregating Original Data — orgdata-package","text":"Aggregating Original Data (raw data) different geographical levels county, manucipality town.","code":""},{"path":[]},{"path":"/reference/orgdata-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"orgdata: Aggregating Original Data — orgdata-package","text":"Maintainer: Yusman Kamaleri ybka@fhi.(ORCID) contributors: KHelse group (https://www.fhi./hn/folkehelse) [contributor, reviewer]","code":""},{"path":"/reference/read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Data File — read_file","title":"Read Data File — read_file","text":"Read rawdata either using FILID value complete file path. uses find_data() generic method.  .csv  file, data.table::fread() used arguments fread function can used.  .xlsx   .xls  file readxl::read_excel() function arguments.  .dta    file, haven::read_dta() used arguments read_dta function can used. Nevertheless, used arguments standardized read_file() : nrows display maksimum numbers read header FALSE give default columnames V1, V2 etc skip specific number raws reading data trimws trim leading trailing whitespace na character value interpreted NA","code":""},{"path":"/reference/read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Data File — read_file","text":"","code":"read_file(file = NULL, ...)  les_fil(file = NULL, ...)"},{"path":"/reference/read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Data File — read_file","text":"file Use FILID, FILEGROUP complete path filename. Data set .csv extension https:// can also file input arg. ... arguments passed related file format","code":""},{"path":"/reference/read_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Data File — read_file","text":"","code":"if (FALSE) { # With FILID DT <- read_file(file = 5) DT <- read_file(file = 5, fill = TRUE, nrows = 10)  # With FILEGROUP dt <- read_file(file = \"UTFORE\")  # With filepath rdata <- read_file(file = \"/file/path/mydata.xlsx\", sheet = \"S3\", range = cell_rows(1:4)) rdata <- read_file(file = \"/file/path/mydata.csv\", sep = \",\", header = FALSE) }"},{"path":"/reference/read_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Log File — read_log","title":"Read Log File — read_log","text":"Read log file orgdata default path. check default path use orgdata:::is_orgdata_path().","code":""},{"path":"/reference/read_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Log File — read_log","text":"","code":"read_log(name = NULL, koblid = NULL)"},{"path":"/reference/read_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Log File — read_log","text":"name Log filename without file extention koblid Connecting ID KOBLID","code":""},{"path":"/reference/read_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Log File — read_log","text":"","code":"if (FALSE) { # To list codes with xxxx9999 of koblid 67 read_log(\"code99\", 67) }"},{"path":"/reference/reset_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset options — reset_options","title":"Reset options — reset_options","text":"Reset orgdata options default","code":""},{"path":"/reference/reset_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset options — reset_options","text":"","code":"reset_options()  reset_opt()"},{"path":"/reference/reset_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reset options — reset_options","text":"","code":"reset_options()"},{"path":"/reference/save_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Save Data to CSV file — save_file","title":"Save Data to CSV file — save_file","text":"Save data .csv format file semicolon ; seperation. file saved specified folder path Access regstration database root getOption(\"orgdata.folder.data\"). Use argument save = TRUE make_file() activate save_file() directly. Else can call save_file() save object output make_file()","code":""},{"path":"/reference/save_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save Data to CSV file — save_file","text":"","code":"save_file(dt = NULL, name = NULL, path = NULL, date = FALSE, fgSpec = NULL)  lagre_fil(dt = NULL, name = NULL, path = NULL, date = FALSE, fgSpec = NULL)"},{"path":"/reference/save_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save Data to CSV file — save_file","text":"dt Input data preferrably data.table format mandatory name Filename .csv file filegroup name path Folder path save file. name valide filegroup (FILGRUPPE) use specified UTMAPPE Access registration database else file saved default folder C:\\Users\\YourUserName\\orgdata_logs. default folder created exist. date Use date time part filename fgSpec File group specification Access registration database","code":""},{"path":"/reference/save_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save Data to CSV file — save_file","text":"","code":"if (FALSE) {  # Save file directly  make_file(\"BEFOLKNING\", save = TRUE)   # Two steps  DF <- make_file(\"BEFOLKNING\")  save_file(DF, \"BEFOLKNING\")   # Save with different name and specified folder  save_file(DF, name = \"myCSVfile\", path = \"C:/MyFolder\") }"},{"path":"/reference/see_file.html","id":null,"dir":"Reference","previous_headings":"","what":"See Column Categories — see_file","title":"See Column Categories — see_file","text":"See categories available dataset.","code":""},{"path":"/reference/see_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"See Column Categories — see_file","text":"","code":"see_file(dt = NULL, ...)  se_fil(dt = NULL, ...)"},{"path":"/reference/see_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"See Column Categories — see_file","text":"dt Dataset type data.frame data.table ... Columnames column index displayed. missing columns listed.","code":""},{"path":"/reference/see_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"See Column Categories — see_file","text":"","code":"if (FALSE) { DT <- make_file(\"BEFOLKNING\") # Use columnames see_file(DT, KJONN, UTDANN, LANDSSB)  dt <- read_file(15) # Use column index see_file(dt) #all columns see_file(dt , c(2,5)) see_file(dt, c(1:3)) #columns 1 to 3 see_file(dt, c(2, 4, 7:9)) }"},{"path":"/reference/see_org.html","id":null,"dir":"Reference","previous_headings":"","what":"See Original Data in the Database — see_org","title":"See Original Data in the Database — see_org","text":"See original data saved org database column KONTROLLERT marked. means dataset cleaned recoded specified INNLESING table Access registration database.","code":""},{"path":"/reference/see_org.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"See Original Data in the Database — see_org","text":"","code":"see_org(name = NULL, filid = NULL, action = c(\"read\", \"delete\"))"},{"path":"/reference/see_org.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"See Original Data in the Database — see_org","text":"name filegroup name filid File ID raw data action read delete data database. Default read.","code":""},{"path":"/reference/see_org.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"See Original Data in the Database — see_org","text":"","code":"if (FALSE) { dt <- see_org(\"LESEFERD\", filid = 134) }"},{"path":"/reference/update_orgdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Update package — update_orgdata","title":"Update package — update_orgdata","text":"Update orgdata directly Github repo. Default main branch.","code":""},{"path":"/reference/update_orgdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update package — update_orgdata","text":"","code":"update_orgdata(...)  upgrade_orgdata(...)"},{"path":"/reference/update_orgdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update package — update_orgdata","text":"... arguments remotes::install_github()","code":""},{"path":"/reference/update_orgdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update package — update_orgdata","text":"","code":"if (FALSE) { update_orgdata() #use default update_orgdata(ref = \"dev\") #to upgrade with dev branch }"},{"path":"/reference/website.html","id":null,"dir":"Reference","previous_headings":"","what":"Show Website — website","title":"Show Website — website","text":"Display website orgdata package ie. https://helseprofil.github.io/orgdata/","code":""},{"path":"/reference/website.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show Website — website","text":"","code":"website(url = NULL)"},{"path":"/reference/website.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show Website — website","text":"url URL","code":""}]
