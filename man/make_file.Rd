% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make-file.R
\name{make_file}
\alias{make_file}
\alias{lag_fil}
\alias{mf}
\title{Implement the Specifications for Raw Files}
\usage{
make_file(
  group = NULL,
  koblid = NULL,
  aggregate = NULL,
  save = FALSE,
  year.geo = NULL,
  implicitnull = NULL,
  row = NULL,
  base = NULL,
  parallel = deprecated(),
  raw = NULL,
  select = NULL
)

lag_fil(
  group = NULL,
  koblid = NULL,
  aggregate = NULL,
  save = FALSE,
  year.geo = NULL,
  implicitnull = NULL,
  row = NULL,
  base = NULL,
  parallel = deprecated(),
  raw = NULL,
  select = NULL
)

mf(
  group = NULL,
  koblid = NULL,
  aggregate = NULL,
  save = FALSE,
  year.geo = NULL,
  implicitnull = NULL,
  row = NULL,
  base = NULL,
  parallel = deprecated(),
  raw = NULL,
  select = NULL
)
}
\arguments{
\item{group}{The name of filegroup as specified in \emph{filgruppe}}

\item{koblid}{\code{KOBLID} from table \emph{tbl_Koble}}

\item{aggregate}{Logical value. Default is \code{TRUE}. Aggregate data according
to the specification in registration database. Global options with
\code{orgdata.aggregate}.}

\item{save}{Logical value. Default is \code{FALSE}. To save as \code{.csv} format file
by activating \code{save_file()} function.}

\item{year.geo}{Which reference year to use for geograhical coding. If it is
missing then global option for \code{orgdata.year} will be used.}

\item{implicitnull}{Logical value. Default is \code{TRUE} to add implicit null to
the dataset. Global options with \code{orgdata.implicit.null}.}

\item{row}{Select specific row(s) numbers only. Useful for debugging. Please
read \code{Debugging} article for detail.}

\item{base}{Logical value. If \code{TRUE} then use year in the original data as the base
year to recode the geographical codes. Default is \code{FALSE} and use all
available codes in geo codebook}

\item{parallel}{Logical or numeric value. With logical value \code{TRUE} it will
run with parallel using 50\% ie. 0.5 of local cores. User can decide other
percentage if needed. For example to use 75\% of the cores then specify as
\code{parallel = 0.75}. Nevertheless, maximum cores allowed is only 80\%. Default
value is \code{FALSE} ie. to use sequential processing}

\item{raw}{Logical value. Default is \code{FALSE} as in config. If \code{TRUE} then
read original raw data directly from source file even if the dataset is
already available in DuckDB without the need to unmark \code{KONTROLLERT} in the
Access database}

\item{select}{Select number of valid files to process as an alternative to
using \code{KOBLID}. To select the first 5 files then write \code{select=1:5}. Use
\code{select="last"} to select the last file.}
}
\description{
Make a \code{csv} file with the specifications in the Access register
database and implement them to the raw data of the selected group of files
ie. (\emph{filgruppe}). All files under the selected group will be affected
unless the \code{KOBLID} with argument \code{koblid} is specified or
\code{select} argument is used. Specifying \code{koblid} or \code{select}
is useful especially for testing purposes.

This function is the most used function in KHelse for processing
raw data. The function \code{\link[=lag_fil]{lag_fil()}} is an alias to \code{\link[=make_file]{make_file()}}.
}
\examples{
\dontrun{
dt <- make_file("ENPERSON")
dt <- make_file("ENPERSON", raw = TRUE) #Skip DuckDB and read directly from original files
dt <- make_file("ENPERSON", koblid = 120:125) #Select specific files only
dt <- make_file("ENPERSON", select = "last") #Select most recent file
}
}
\seealso{
Other filegroups functions: 
\code{\link{make_filegroups}()}
}
\concept{filegroups functions}
